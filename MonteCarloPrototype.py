from collections import defaultdict
import gymnasium as gym
import numpy as np
import matplotlib.pyplot as plt
from tqdm import tqdm
from gym.wrappers import TimeLimit


def abstract_state(state):
    # Define a mapping of real state to abstract state
    # Here, we discretize the blank space between the
    # wall and the paddle as an 16 row by 18 column grid
    cellHeight = 6
    cellWidth = 8

    # Define start and end of discretization space
    startX = 8
    startY = 93
    endX = 152
    endY = 188

    ballX = -1
    ballY = -1
    paddleX = -1

    # Define the height and width of the screen and the lower limit of the screen we want to search
    screen_height, screen_width, _ = env.observation_space.shape


    # Define the color threshold for the red pixels
    red_threshold = 150
    # Loop through the bottom half of the screen and
    # find the red pixels in the ball area
    for x in range(startX, endX):
        for y in range(startY, endY):
            pixel_color = state[y][x][0]
            if pixel_color > red_threshold:
                ballX = int((x - startX) / cellWidth)
                ballY = int((y - startY) / cellHeight)
                break
        if (ballX != -1) or (ballY != -1):
            break      


    # Loop through the bottom half of the screen and
    # find the red pixels in the paddle area
    red_pixels = []
    for x in range(startX, endX):
        for y in range(endY, screen_height):
            pixel_color = state[y][x][0]
            if pixel_color > red_threshold:
                paddleX = int((x - startX) / cellWidth)
                break
        if paddleX != -1:
            break

    # Calculate grid position of ball
    if (len(red_pixels) > 0):
        paddleX = int((red_pixels[0][0] - startX) / cellWidth)

    # print("Ball is in grid position: (", ballX, ", ", ballY, ")")
    # print("Paddle is in position ",paddleX)

    abstract_state = ballX, ballY, paddleX 

    return abstract_state

    

def monte_carlo_policy_evaluation(env, gamma, num_episodes):
    values = defaultdict(float)
    training_data = []

    for i in tqdm(range(num_episodes)):
        episode = []
        returns = defaultdict(list)
        epsilon_min = 0.01
        epsilon_max = 0.02
        epsilon_decay = 950
        eps = max(epsilon_min, epsilon_max - (epsilon_max - epsilon_min) * i / epsilon_decay)


        state = env.reset()

        terminated = False
        truncated = False

        next_state, reward, terminated, truncated, info = env.step(1)
        state = next_state
        aState = abstract_state(state)


        lives = 5
        lives = info['lives']

        while not (terminated or truncated):
            eps = max(epsilon_min, epsilon_max - (epsilon_max - epsilon_min) * i / epsilon_decay)
            action = policy(aState, values, eps)
            if info['lives'] != lives:
                # Fire the ball with action 1
                action = 1
                lives = info['lives']

            next_state, reward, terminated, truncated, info = env.step(action)
            aState = abstract_state(state)
            episode.append((aState, action, reward))
            state = next_state
        G = 0
        tG = 0
        # print(episode)
        for t in reversed(range(len(episode))):
            state, action, reward = episode[t]
            G = gamma * G + reward
            tG += reward
            for t2 in range (t):
                for a in range (3):
                    if t2 != t:
                        if a != action:
                            returns[state, action].append(G)
                            values = ((-1, -1, 5), 3): 1.0485869362836162, ((-1, -1, 6), 2): 0.17809873321264186, ((-1, -1, 9), 3): 0.7856781408072189, ((-1, -1, 10), 3): 0.6406305424177592, ((-1, -1, 9), 1): 0.15592077087479764, ((-1, -1, 9), 2): 0.32961154126981684, ((-1, -1, 8), 3): 0.0, ((8, 15, 8), 1): 0.0, ((9, 15, 10), 1): 0.0, ((9, 14, 9), 1): 0.4047319726783239, ((10, 13, 6), 2): 0.7623427143471037, ((11, 12, 9), 3): 0.7547192872036323, ((11, 11, 10), 3): 0.5870367819374847, ((12, 11, 10), 0): 0.0, ((12, 10, 10), 1): 0.0, ((13, 9, 9), 1): 0.0, ((13, 9, 8), 2): 0.0, ((14, 8, 8), 0): 1.261771651259533, ((14, 7, 8), 0): 0.5989560064661611, ((15, 7, 8), 1): 1.1768782821570751, ((15, 6, 8), 1): 0.6894490858690773, ((16, 5, 8), 1): 0.7323033696543975, ((16, 5, 8), 0): 0.6757290490602832, ((-1, -1, 8), 1): 0.0, ((-1, -1, 8), 0): 1.1026266114917593, ((-1, -1, 6), 1): 0.5753547499769285, ((-1, -1, 3), 2): 1.0806843419230732, ((-1, -1, 2), 2): 0.7323109126719323, ((-1, -1, 2), 1): 1.059178723518804, ((-1, -1, 0), 1): 0.8429431933839269, ((0, 15, 0), 0): 0.6235253948912, ((1, 14, 2), 0): 0.0, ((1, 14, 2), 2): 0.31798906381914344, ((2, 13, 2), 1): 1.9850839246599228, ((2, 12, 3), 0): 0.747172094331596, ((3, 12, 1), 3): 0.8097278682212583, ((3, 11, 0), 2): 1.2396168817451516, ((4, 10, 0), 3): 0.5639051904523875, ((5, 9, 0), 0): 0.7623427143471034, ((5, 8, 0), 3): 0.7547192872036323, ((6, 8, 0), 0): 0.0, ((6, 7, 0), 3): 0.0, ((7, 6, 0), 0): 0.7323033696543975, ((8, 5, 2), 3): 0.9093880295209509, ((-1, -1, 3), 0): 1.640332354220429, ((-1, -1, 4), 3): 1.0861268922911032, ((-1, -1, 4), 1): 0.6590831348644993, ((-1, -1, 3), 1): 0.0, ((13, 15, 1), 1): 1.4535716024821643, ((13, 14, 0), 2): 0.7684980977434064, ((12, 13, 0), 0): 0.0, ((12, 12, 0), 1): 1.2502527656724758, ((11, 11, 1), 3): 0.636185486063871, ((11, 10, 0), 2): 0.5929664464014994, ((10, 9, 0), 1): 1.2131190082792376, ((10, 8, 0), 3): 0.9773515475779135, ((9, 7, 0), 0): 0.9675780321021343, ((9, 6, 0), 3): 0.5811664141181094, ((8, 5, 0), 2): 1.278813314703126, ((8, 4, 0), 3): 0.9388399969706689, ((7, 3, 1), 0): 0.0, ((7, 2, 1), 3): 0.0, ((6, 1, 1), 2): 2.224147948677192, ((6, 0, 3), 3): 0.9900000000000002, ((5, 0, 1), 1): 1.5416850759668534, ((5, 1, 0), 2): 0.9900000000000001, ((4, 2, 0), 1): 1.7210459352890266, ((4, 3, 0), 0): 0.0, ((3, 4, 0), 3): 1.2337312692406128, ((3, 5, 0), 1): 0.536268225207185, ((2, 6, 0), 0): 1.441317179300199, ((2, 7, 0), 0): 1.4175833540281269, ((1, 8, 0), 2): 0.9227446944279198, ((1, 9, 0), 0): 0.9135172474836409, ((0, 10, 0), 3): 1.6147831264829131, ((0, 11, 1), 3): 1.3381598223681659, ((0, 12, 0), 2): 1.645385165271832, ((0, 13, 0), 3): 1.796775285616653, ((0, 14, 0), 2): 1.834410482516355, ((1, 14, 0), 3): 1.3417745944511996, ((1, 14, 0), 1): 0.8261686238355866, ((2, 13, 0), 0): 0.9215826202700562, ((2, 12, 0), 0): 1.203405270759091, ((3, 12, 0), 1): 1.9456083705325775, ((3, 11, 0), 0): 1.1603788872209382, ((4, 10, 1), 3): 0.6426116020847182, ((4, 10, 2), 0): 1.2456579339101308, ((5, 9, 3), 3): 1.194942239332367, ((5, 8, 5), 1): 0.6964132180495735, ((6, 8, 5), 3): 0.7623427143471035, ((6, 7, 3), 2): 0.7820353373963757, ((7, 6, 5), 1): 1.4216261930212362, ((7, 6, 8), 3): 1.1250143980122027, ((8, 5, 9), 3): 1.1695893869121738, ((-1, -1, 7), 0): 0.0, ((-1, -1, 8), 2): 0.0, ((-1, -1, 7), 3): 0.0, ((-1, -1, 5), 2): 1.6733129825879336, ((-1, -1, 1), 1): 0.3074570247794535, ((1, 15, 1), 1): 0.0, ((2, 14, 5), 0): 0.0, ((2, 13, 5), 0): 0.8261686238355866, ((3, 12, 3), 0): 1.921835472747501, ((3, 11, 2), 2): 0.7397003733882802, ((4, 10, 2), 1): 0.7936142836436552, ((4, 9, 1), 1): 1.3936226910836886, ((5, 8, 0), 2): 1.2086606476150656, ((5, 7, 0), 3): 0.0, ((6, 6, 0), 0): 0.6298236312032321, ((6, 5, 1), 3): 0.9227446944279197, ((7, 4, 0), 0): 0.0, ((7, 3, 1), 2): 0.0, ((8, 2, 4), 3): 0.5929664464014994, ((8, 1, 5), 3): 0.5989560064661612, ((9, 0, 3), 0): 0.32444552986342573, ((9, 0, 2), 2): 1.477593413265888, ((10, 1, 3), 1): 0.6964132180495735, ((10, 2, 4), 3): 1.555454749976928, ((11, 3, 5), 1): 0.0, ((11, 4, 7), 3): 1.5245012004523877, ((12, 5, 6), 1): 0.0, ((12, 6, 5), 2): 1.494163626563385, ((13, 7, 8), 3): 1.240609818541641, ((13, 8, 10), 3): 1.804993396328712, ((14, 9, 10), 0): 0.9506483205817087, ((14, 10, 11), 1): 0.5582661385478637, ((15, 11, 13), 3): 0.8953382542587162, ((15, 12, 14), 0): 0.0, ((16, 13, 16), 3): 0.8775210229989678, ((16, 14, 16), 1): 1.2451055629790682, ((17, 15, 17), 3): 1.074902971484683, ((17, 14, 17), 1): 1.153453586042174, ((16, 14, 17), 0): 1.316583683762332, ((15, 13, 17), 3): 0.9391489871980742, ((14, 12, 17), 1): 1.6004077415322036, ((14, 12, 17), 0): 0.8616937253315797, ((13, 11, 17), 0): 1.3823633140499891, ((12, 10, 14), 2): 0.0, ((11, 10, 13), 2): 0.6491026283684022, ((11, 9, 13), 0): 0.0, ((10, 8, 14), 1): 1.5867042744882853, ((9, 8, 15), 3): 1.4853408781822903, ((8, 7, 15), 0): 1.265067891908443, ((8, 6, 15), 1): 0.0, ((7, 6, 15), 1): 0.0, ((6, 5, 14), 0): 0.9043820750088042, ((5, 4, 13), 2): 0.7323033696543976, ((5, 4, 13), 0): 0.7249803359578533, ((4, 3, 13), 0): 1.5439564963014993, ((3, 2, 13), 1): 1.5968227947421114, ((2, 2, 14), 0): 0.0, ((2, 1, 14), 3): 1.2052105034108749, ((1, 0, 11), 2): 1.0, ((0, 0, 10), 2): 2.2848235841963707, ((0, 0, 9), 1): 0.45204365026647547, ((0, 1, 6), 2): 0.4898902730042049, ((1, 1, 4), 2): 1.3848319726783243, ((2, 2, 3), 2): 0.970299, ((3, 3, 3), 0): 1.7135396670494265, ((3, 3, 4), 0): 0.9320653479069899, ((4, 4, 7), 3): 1.441317179300199, ((5, 5, 10), 3): 1.5618889791102224, ((6, 5, 12), 3): 0.0, ((6, 6, 11), 3): 0.9135172474836408, ((7, 7, 11), 2): 0.9043820750088044, ((8, 7, 13), 3): 0.895338254258716, ((9, 8, 15), 0): 0.38489607889348465, ((9, 9, 16), 3): 2.2329933973161986, ((10, 9, 16), 1): 1.455782594706463, ((11, 10, 14), 0): 0.8600583546412882, ((12, 11, 13), 2): 0.812521553344763, ((12, 11, 13), 0): 1.5434939009454853, ((13, 12, 13), 0): 1.505113710967477, ((14, 13, 14), 1): 1.6415303861098336, ((15, 13, 16), 3): 0.0, ((15, 14, 16), 3): 1.3568845106120193, ((16, 15, 15), 2): 0.793614283643655, ((-1, -1, 17), 3): 0.5151371174238033, ((-1, -1, 16), 1): 0.0, ((-1, -1, 14), 2): 0.0, ((16, 15, 15), 0): 0.0, ((16, 14, 17), 3): 1.6493964659679166, ((15, 13, 17), 0): 0.8724886824540797, ((15, 13, 17), 1): 0.7700431458051551, ((14, 11, 17), 1): 1.3685396809094887, ((13, 10, 17), 3): 0.773685747303929, ((12, 9, 17), 1): 0.7105532272722922, ((12, 9, 17), 2): 0.3079087775616165, ((11, 8, 16), 1): 1.343401798168761, ((11, 7, 14), 2): 0.6195666941081793, ((10, 7, 14), 1): 0.8661306058302796, ((10, 6, 15), 0): 0.4612219674180958, ((9, 5, 17), 3): 0.41294967113388825, ((9, 5, 17), 1): 0.6825545950103871, ((-1, -1, 17), 1): 0.6168944997050579, ((-1, -1, 17), 0): 0.042056088372865424, ((-1, -1, 15), 1): 1.0954493061657764, ((-1, -1, 12), 2): 0.18705675966723195, ((-1, -1, 0), 2): 0.5099857462495654, ((-1, -1, 0), 0): 0.18651429421898294, ((0, 15, 0), 2): 0.5255964875255621, ((1, 14, 1), 2): 0.0, ((1, 14, 0), 2): 0.19927913048836346, ((2, 13, 0), 3): 1.3195051317242503, ((2, 12, 0), 3): 0.8179069375972307, ((3, 12, 0), 3): 0.8179069375972305, ((4, 10, 0), 0): 1.5173484211672918, ((5, 9, 0), 1): 1.4584618958136126, ((5, 8, 0), 1): 0.7700431458051551, ((6, 8, 1), 3): 1.1671621263128522, ((6, 7, 4), 0): 1.4209999452281055, ((7, 6, 7), 3): 1.4285534182539534, ((7, 6, 9), 3): 1.4142678840714138, ((-1, -1, 11), 1): 1.1306802037321633, ((-1, -1, 10), 2): 0.0, ((-1, -1, 13), 3): 0.0, ((-1, -1, 14), 3): 0.9969896753454693, ((-1, -1, 14), 1): 0.0, ((-1, -1, 14), 0): 1.3764440489373673, ((8, 15, 8), 0): 0.7919275076306368, ((9, 15, 13), 2): 0.0, ((9, 14, 14), 3): 0.5151371174238033, ((10, 13, 14), 1): 0.5099857462495654, ((10, 13, 13), 1): 0.0, ((11, 12, 13), 2): 1.4215505433875715, ((11, 11, 13), 3): 1.3870352323728472, ((12, 11, 10), 2): 0.0, ((12, 10, 10), 2): 0.0, ((13, 9, 11), 3): 1.1725035497216643, ((13, 9, 10), 0): 1.5653616276406666, ((14, 8, 9), 2): 0.4658807751697935, ((14, 7, 8), 3): 0.0, ((15, 7, 7), 2): 0.815203359307635, ((15, 6, 7), 1): 0.45660974774391444, ((16, 5, 7), 1): 0.4475232137638106, ((-1, -1, 11), 3): 0.0, ((-1, -1, 12), 0): 0.6459458867207203, ((-1, -1, 12), 3): 0.6426116020847181, ((-1, -1, 9), 0): 0.0, ((16, 15, 12), 3): 0.0, ((16, 14, 12), 0): 0.0, ((15, 13, 12), 1): 0.6556592205741436, ((15, 13, 12), 0): 0.7547192872036323, ((14, 12, 11), 1): 1.155403940155173, ((14, 11, 8), 2): 0.7547192872036323, ((13, 11, 6), 2): 0.0, ((13, 10, 5), 0): 0.5696012024771592, ((12, 9, 5), 2): 0.9327288245753405, ((12, 9, 6), 3): 0.0, ((11, 8, 7), 1): 0.0, ((11, 7, 8), 3): 0.7834279061665264, ((10, 7, 8), 1): 0.0, ((10, 6, 6), 0): 0.9017918643768593, ((9, 5, 5), 2): 0.0, ((9, 5, 5), 1): 1.810195731935137, ((-1, -1, 7), 1): 0.4432639602206411, ((-1, -1, 10), 1): 0.5612655941702952, ((0, 15, 0), 3): 1.3658761783481708, ((1, 14, 6), 2): 0.0, ((1, 14, 9), 3): 0.0, ((2, 13, 12), 3): 0.0, ((2, 12, 12), 3): 0.0, ((3, 12, 11), 2): 1.1249645786813278, ((3, 11, 11), 0): 1.064160459051361, ((4, 10, 9), 0): 0.0, ((4, 10, 6), 0): 1.1493712016558066, ((5, 9, 5), 2): 0.954497281370644, ((5, 8, 3), 1): 1.1146553291526726, ((6, 8, 0), 2): 0.7034476949995693, ((6, 7, 0), 2): 0.0, ((7, 6, 0), 3): 0.8986978633866266, ((8, 5, 0), 3): 1.0774547742871823, ((-1, -1, 3), 3): 0.0
        training_data.append((i,tG))
    return values, training_data

# Define the policy function
def policy(state, values, epsilon):
    """
    A policy for the Breakout game that becomes more greedy as the value function becomes more accurate.

    :param state: The current state of the game.
    :param values: The value function for the current policy.
    :param epsilon: The exploration rate.
    :return: The action to take.
    """
    if np.random.rand() < epsilon:
        return np.random.choice([0, 1, 2, 3])
    else:
        actions = [0, 1, 2, 3]
        q_values = [values[state, a] for a in actions]  # convert state to a tuple
        return actions[np.argmax(q_values)]

# Create the environment , render_mode="human"
env = gym.make("ALE/Breakout-v5", render_mode="human")
env = TimeLimit(env, max_episode_steps=1000)
# Evaluate the policy using the Monte Carlo method
values, tData = monte_carlo_policy_evaluation(env, 0.99, 1000)

# assume that your training data is a list of (episode, reward) tuples

# extract the episode numbers and reward values from the training data
episodes = [data[0] for data in tData]
rewards = [data[1] for data in tData]

# create a line plot of rewards versus episodes
plt.plot(episodes, rewards)

# add axis labels and a title to the plot
plt.xlabel('Episodes')
plt.ylabel('Rewards')
plt.title('Training Progress')

# display the plot
plt.show()

# Print the values for some example states
print('Value for state (10, 20, 1):', values)

